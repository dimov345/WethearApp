import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# üóùÔ∏è –í—ä–≤–µ–¥–∏ —Å–≤–æ—è API –∫–ª—é—á —Ç—É–∫
API_KEY = "https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}"
CITY = "Plovdiv"

# üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞ –ü–ª–æ–≤–¥–∏–≤
lat = 42.1354
lon = 24.7453

# üå¶Ô∏è URL –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ (5 –¥–Ω–∏)
WEATHER_URL = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}"

# üåç URL –∑–∞ –∑–∞–º—ä—Ä—Å–µ–Ω–æ—Å—Ç –Ω–∞ –≤—ä–∑–¥—É—Ö–∞
AIR_URL = f"http://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={API key}"

# üß† –ò–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω–∏ –º–µ—Ç–µ–æ –¥–∞–Ω–Ω–∏
def get_weather_data():
    response = requests.get(WEATHER_URL)
    data = response.json()
    weather = []

    for entry in data["list"]:
        date = datetime.fromtimestamp(entry["dt"]).date()
        temp = entry["main"]["temp"]
        rain = entry.get("rain", {}).get("3h", 0)
        humidity = entry["main"]["humidity"]
        weather.append({
            "date": date,
            "temp": temp,
            "rain": rain,
            "humidity": humidity
        })

    df = pd.DataFrame(weather)
    df = df.groupby("date").agg({
        "temp": "mean",
        "rain": "sum",
        "humidity": "mean"
    })
    return df

# üìê –î–∞–Ω–Ω–∏ –∑–∞ –æ–±–∏—á–∞–π–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ –º–∞–π (–ø—Ä–∏–º–µ—Ä)
NORMALS = {
    "May": {
        "temp": 17.0,
        "rain_days": 8
    }
}

# üè≠ –ó–∞–º—ä—Ä—Å–µ–Ω–æ—Å—Ç ‚Äì –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
def get_air_quality_data():
    response = requests.get(AIR_URL)
    data = response.json()

    if "list" in data and len(data["list"]) > 0:
        aqi = data["list"][0]["main"]["aqi"]
        components = data["list"][0]["components"]
        return aqi, components
    else:
        return None, None

# üñ•Ô∏è Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config("–ü—Ä–æ–≥–Ω–æ–∑–∞ –∏ –≤—ä–∑–¥—É—Ö", layout="centered")
st.title(f"üå§Ô∏è –í—Ä–µ–º–µ—Ç–æ –∏ –∑–∞–º—ä—Ä—Å–µ–Ω–æ—Å—Ç—Ç–∞ –≤ {CITY}")

df = get_weather_data()

# üìÖ –ü—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–Ω–∏
st.subheader("üìà –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –ø–æ –¥–Ω–∏")
st.line_chart(df["temp"])

st.subheader("üåßÔ∏è –í–∞–ª–µ–∂–∏ –ø–æ –¥–Ω–∏ (–≤ –º–º)")
st.bar_chart(df["rain"])

# üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –º–µ—Å–µ—Ü–∞
st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –º–µ—Å–µ—Ü–∞")
month = "May"  # —Ñ–∏–∫—Å–∏—Ä–∞–Ω–æ, –º–æ–∂–µ –¥–∞ —Å–µ –Ω–∞–ø—Ä–∞–≤–∏ –¥–∏–Ω–∞–º–∏—á–Ω–æ
avg_temp = df["temp"].mean()
rain_days = (df["rain"] > 0).sum()

st.write(f"üìå –°—Ä–µ–¥–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: **{avg_temp:.1f}¬∞C**")
st.write(f"üìå –î–Ω–∏ —Å –≤–∞–ª–µ–∂–∏: **{rain_days} –¥–Ω–∏**")

if avg_temp > NORMALS[month]["temp"] + 2:
    st.warning("‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏—Ç–µ —Å–∞ –ø–æ-–≤–∏—Å–æ–∫–∏ –æ—Ç –æ–±–∏—á–∞–π–Ω–æ—Ç–æ –∑–∞ –º–µ—Å–µ—Ü–∞.")
elif avg_temp < NORMALS[month]["temp"] - 2:
    st.warning("‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏—Ç–µ —Å–∞ –ø–æ-–Ω–∏—Å–∫–∏ –æ—Ç –æ–±–∏—á–∞–π–Ω–æ—Ç–æ –∑–∞ –º–µ—Å–µ—Ü–∞.")
else:
    st.success("‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏—Ç–µ —Å–∞ –≤ –Ω–æ—Ä–º–∞–ª–Ω–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü–∏.")

if rain_days > NORMALS[month]["rain_days"]:
    st.warning("üåßÔ∏è –ü–æ–≤–µ—á–µ –¥—ä–∂–¥–æ–≤–Ω–∏ –¥–Ω–∏ –æ—Ç –æ–±–∏—á–∞–π–Ω–æ—Ç–æ.")
else:
    st.success("‚úÖ –í–∞–ª–µ–∂–∏—Ç–µ —Å–∞ –≤ –Ω–æ—Ä–º–∞—Ç–∞.")

# üß™ –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –≤—ä–∑–¥—É—Ö–∞ ‚Äì –∞–Ω–∞–ª–∏–∑ –Ω–∞ –∑–∞–º—ä—Ä—Å–∏—Ç–µ–ª–∏—Ç–µ
st.subheader("üß™ –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –≤—ä–∑–¥—É—Ö–∞")

aqi, components = get_air_quality_data()

if aqi:
    aqi_levels = {
        1: "–î–æ–±—Ä–æ",
        2: "–ó–∞–¥–æ–≤–æ–ª–∏—Ç–µ–ª–Ω–æ",
        3: "–£–º–µ—Ä–µ–Ω–æ",
        4: "–õ–æ—à–æ",
        5: "–ú–Ω–æ–≥–æ –ª–æ—à–æ"
    }

    st.markdown(f"**AQI (Air Quality Index):** {aqi} ‚Äì {aqi_levels[aqi]}")
    st.markdown("**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ (Œºg/m¬≥):**")
    st.json(components)

    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –∑–∞–º—ä—Ä—Å–∏—Ç–µ–ª–∏ —Å–ø–æ—Ä–µ–¥ –°–ó–û
    # PM2.5: 15 Œºg/m¬≥ (–¥–Ω–µ–≤–Ω–∞)
    if components["pm2_5"] > 15:
        st.warning(f"‚ö†Ô∏è PM2.5 ({components['pm2_5']} Œºg/m¬≥) –µ –Ω–∞–¥ –ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–∞—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞ –æ—Ç 15 Œºg/m¬≥!")
    else:
        st.success(f"‚úÖ PM2.5 ({components['pm2_5']} Œºg/m¬≥) –µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–∏ –≥—Ä–∞–Ω–∏—Ü–∏.")
    
    # NO2: 40 Œºg/m¬≥ (–¥–Ω–µ–≤–Ω–∞)
    if components["no2"] > 40:
        st.warning(f"‚ö†Ô∏è NO2 ({components['no2']} Œºg/m¬≥) –µ –Ω–∞–¥ –ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–∞—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞ –æ—Ç 40 Œºg/m¬≥!")
    else:
        st.success(f"‚úÖ NO2 ({components['no2']} Œºg/m¬≥) –µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–∏ –≥—Ä–∞–Ω–∏—Ü–∏.")

    # O3: 160 Œºg/m¬≥ (–¥–Ω–µ–≤–Ω–∞)
    if components["o3"] > 160:
        st.warning(f"‚ö†Ô∏è O3 ({components['o3']} Œºg/m¬≥) –µ –Ω–∞–¥ –ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–∞—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞ –æ—Ç 160 Œºg/m¬≥!")
    else:
        st.success(f"‚úÖ O3 ({components['o3']} Œºg/m¬≥) –µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–∏ –≥—Ä–∞–Ω–∏—Ü–∏.")
    
    # CO: 4.4 Œºg/m¬≥ (—á–∞—Å–æ–≤–∞)
    if components["co"] > 4.4:
        st.warning(f"‚ö†Ô∏è CO ({components['co']} Œºg/m¬≥) –µ –Ω–∞–¥ –ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–∞—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞ –æ—Ç 4.4 Œºg/m¬≥!")
    else:
        st.success(f"‚úÖ CO ({components['co']} Œºg/m¬≥) –µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–∏ –≥—Ä–∞–Ω–∏—Ü–∏.")
    
    # PM10: 50 Œºg/m¬≥ (–¥–Ω–µ–≤–Ω–∞)
    if components["pm10"] > 50:
        st.warning(f"‚ö†Ô∏è PM10 ({components['pm10']} Œºg/m¬≥) –µ –Ω–∞–¥ –ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–∞—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞ –æ—Ç 50 Œºg/m¬≥!")
    else:
        st.success(f"‚úÖ PM10 ({components['pm10']} Œºg/m¬≥) –µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–∏ –≥—Ä–∞–Ω–∏—Ü–∏.")

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –∑–∞–º—ä—Ä—Å–∏—Ç–µ–ª–∏—Ç–µ
    fig, ax = plt.subplots()
    ax.bar(components.keys(), components.values(), color='teal')
    ax.set_ylabel("Œºg/m¬≥")
    ax.set_title("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∑–∞–º—ä—Ä—Å–∏—Ç–µ–ª–∏")
    st.pyplot(fig)

else:
    st.warning("‚ö†Ô∏è –ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –∑–∞–º—ä—Ä—Å–µ–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –≤—ä–∑–¥—É—Ö–∞.")
